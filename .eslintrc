{
  "env": {
    "browser": true,
    "node": true
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "polyfills": ["Promise"]
  },
  "globals": {
    "Proxy": true,
    "JSX": "readonly"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json",
    "sourceType": "module",
    "extraFileExtensions": [".scss"]
  },
  "extends": [
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:react/recommended",
    "plugin:security/recommended",
    "plugin:compat/recommended",
    "prettier",
    "prettier/@typescript-eslint",
    "prettier/react"
  ],
  "plugins": [
    "jsdoc",
    "import",
    "@typescript-eslint",
    "@typescript-eslint/tslint",
    "react-hooks",
    "react",
    "jsx-a11y",
    "security"
  ],
  "rules": {
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array-simple"
      }
    ],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Did you mean `object`?"
          },
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Did you mean `number`?"
          },
          "String": {
            "message": "Avoid using the `String` type. Did you mean `string`?"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
          },
          "AbortController": {
            "message": "Don't manually setup abort controller, use service client classes"
          },
          "Breadcrumbs": {
            "message": "Do not use breadcrumbs context directly. To set up custom breadcrumbs use <DynamicBreadcrumb /> component instead"
          },
          "IBreadcrumbsContext": {
            "message": "Do not use breadcrumbs context directly. To set up custom breadcrumbs use <DynamicBreadcrumb /> component instead"
          }
        }
      }
    ],
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": "error",
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        "accessibility": "explicit"
      }
    ],
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/member-delimiter-style": [
      "off",
      {
        "multiline": {
          "delimiter": "none",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/member-ordering": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      }
    ],
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-floating-promises": "off",
    "@typescript-eslint/no-for-in-array": "off",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-misused-new": "error",
    "@typescript-eslint/no-namespace": "off",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "no-param-reassign": "error",
    "@typescript-eslint/no-parameter-properties": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-this-alias": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-var-requires": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        "path": "always",
        "types": "prefer-import",
        "lib": "always"
      }
    ],
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/unified-signatures": "error",
    "arrow-body-style": "off",
    "arrow-parens": ["off", "always"],
    "brace-style": ["off", "off"],
    "class-methods-use-this": "off",
    "comma-dangle": "off",
    "complexity": [
      "error",
      {
        "max": 20
      }
    ],
    "constructor-super": "error",
    "curly": "error",
    "default-case": "error",
    "eol-last": "off",
    "eqeqeq": ["error", "always"],
    "guard-for-in": "error",
    "id-blacklist": [
      "error",
      "any",
      "Number",
      "number",
      "String",
      "string",
      "Boolean",
      "boolean",
      "Undefined",
      "undefined"
    ],
    "id-match": "error",
    "import/no-default-export": "off",
    "import/no-deprecated": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": false,
        "peerDependencies": true
      }
    ],
    "import/no-internal-modules": "off",
    "import/no-unassigned-import": "off",
    "import/order": "error",
    "jsdoc/check-alignment": "off",
    "jsdoc/check-param-names": "off",
    "jsdoc/check-tag-names": "off",
    "jsdoc/check-types": "off",
    "jsdoc/implements-on-classes": "off",
    "jsdoc/newline-after-description": "off",
    "jsdoc/no-undefined-types": "off",
    "jsdoc/require-jsdoc": "off",
    "jsdoc/require-param": "off",
    "jsdoc/require-param-description": "off",
    "jsdoc/require-param-name": "off",
    "jsdoc/require-returns": "off",
    "jsdoc/require-returns-check": "off",
    "jsdoc/require-returns-description": "off",
    "jsdoc/valid-types": "off",
    "linebreak-style": "off",
    "max-classes-per-file": ["error", 1],
    "max-len": "off",
    "max-lines": ["error", 1000],
    "new-parens": "off",
    "newline-per-chained-call": "off",
    "no-bitwise": "off",
    "no-caller": "error",
    "no-cond-assign": "error",
    "no-console": "error",
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-duplicate-case": "error",
    "no-duplicate-imports": "error",
    "no-empty": "error",
    "no-eval": "error",
    "no-extra-semi": "off",
    "no-fallthrough": "error",
    "no-invalid-regexp": "error",
    "no-invalid-this": "off",
    "@typescript-eslint/no-invalid-this": ["error"],
    "no-irregular-whitespace": "off",
    "no-magic-numbers": "off",
    "no-multiple-empty-lines": "off",
    "no-new-wrappers": "error",
    "no-null/no-null": "off",
    "no-octal": "error",
    "no-octal-escape": "error",
    "no-plusplus": "error",
    "no-redeclare": "error",
    "no-regex-spaces": "error",
    "no-restricted-imports": "error",
    "no-restricted-syntax": ["error", "ForInStatement"],
    "no-return-await": "error",
    "no-sequences": "error",
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "error",
    "no-throw-literal": "error",
    "no-trailing-spaces": "off",
    "no-undef-init": "error",
    "no-underscore-dangle": "warn",
    "no-unsafe-finally": "error",
    "no-unused-labels": "error",
    "no-var": "error",
    "no-void": "error",
    "no-with": "error",
    "object-shorthand": ["error", "always"],
    "one-var": ["error", "never"],
    "padding-line-between-statements": [
      "off",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    "prefer-arrow/prefer-arrow-functions": "off",
    "prefer-const": "error",
    "prefer-object-spread": "error",
    "prefer-template": "error",
    "quote-props": "off",
    "radix": "error",
    "react/jsx-boolean-value": ["error", "always"],
    "no-delete-var": "error",
    "react/jsx-curly-spacing": "off",
    "react/jsx-equals-spacing": "off",
    "react/jsx-key": "error",
    "react/jsx-no-bind": [
      "error",
      {
        "ignoreDOMComponents": true
      }
    ],
    "react/jsx-wrap-multilines": "off",
    "react/no-danger": "error",
    "react/no-unused-state": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "jsx-a11y/tabindex-no-positive": "error",
    "jsx-a11y/role-supports-aria-props": "error",
    "jsx-a11y/role-has-required-aria-props": "error",
    "jsx-a11y/aria-role": "error",
    "jsx-a11y/aria-props": "error",
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/no-onchange": "error",
    "jsx-a11y/no-static-element-interactions": "error",
    "jsx-a11y/aria-unsupported-elements": "error",
    "jsx-a11y/anchor-is-valid": "error",
    "jsx-a11y/heading-has-content": "error",
    "space-before-function-paren": "off",
    "space-in-parens": ["off", "never"],
    "semi": "off",
    "@typescript-eslint/semi": "error",
    "spaced-comment": [
      "error",
      "always",
      {
        "markers": ["/", "#region", "#endregion"]
      }
    ],
    "use-isnan": "error",
    "valid-typeof": "off",
    "yoda": "error",
    "@typescript-eslint/tslint/config": [
      "error",
      {
        "rules": {
          "ban": [
            true,
            {
              "message": "No alert, please use popup",
              "name": "alert"
            },
            {
              "message": "Do not use lodash get, use propety name to get value directly. Use extra if or inline check for possible undefined values.",
              "name": ["_", "get"]
            },
            {
              "message": "Do not use lodash filter, use native filter function. Use extra if or inline check for possible undefined values.",
              "name": ["_", "filter"]
            },
            {
              "message": "Do not use lodash keys, use Object.keys(xx). Use extra if or inline check for possible undefined values.",
              "name": ["_", "keys"]
            },
            {
              "message": "Do not use lodash find, use native find function. Use extra if or inline check for possible undefined values.",
              "name": ["_", "find"]
            },
            {
              "message": "Do not use breadcrumbs context directly. To set up custom breadcrumbs use <DynamicBreadcrumb /> component instead",
              "name": "withBreadcrumbsContext"
            },
            {
              "message": "Do not use breadcrumbs context directly. To set up custom breadcrumbs use <DynamicBreadcrumb /> component instead",
              "name": "BreadcrumbsContextType"
            }
          ],
          "encoding": true,
          "match-default-export-name": true,
          "no-dynamic-delete": true,
          "no-inferred-empty-object-type": true,
          "no-mergeable-namespace": true,
          "no-unnecessary-callback-wrapper": true,
          "prefer-conditional-expression": true,
          "prefer-method-signature": true,
          "prefer-switch": [
            true,
            {
              "min-cases": 3
            }
          ],
          "prefer-while": true,
          "return-undefined": true,
          "strict-type-predicates": true,
          "switch-final-break": true,
          "typedef": [true, "call-signature", "property-declaration"]
        }
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "rules": {
        "react/prop-types": "off",
        "no-unused-vars": ["off"]
      }
    },
    {
      "files": ["test/**/*.ts", "test/**/*.tsx", "**/*.test.ts"],
      "plugins": ["jest"],
      "env": {
        "jest/globals": true
      },
      "rules": {
        "import/no-extraneous-dependencies": [
          "error",
          {
            "devDependencies": true,
            "peerDependencies": true
          }
        ]
      }
    }
  ]
}
